// scripts/generate-unified-client.js
import fs from "fs";
import path from "path";
import { execSync } from "child_process";

/**
 * Generate both TypeScript and Python clients using OpenAPI Generator
 */
function generateUnifiedClients() {
  console.log(
    "üî• Generating unified TypeScript and Python clients with OpenAPI Generator..."
  );

  try {
    // Check if openapi.json exists
    if (!fs.existsSync("./openapi.json")) {
      console.error(
        "‚ùå openapi.json not found. Run 'npm run build:openapi' first."
      );
      process.exit(1);
    }

    // Clean up previous generated files
    console.log("üßπ Cleaning up previous generated files...");
    const tsOutputDir = "./src/prometheos-client-generated";
    const pythonOutputDir = "./src/prometheos-client-python-generated";

    if (fs.existsSync(tsOutputDir)) {
      fs.rmSync(tsOutputDir, { recursive: true, force: true });
    }
    if (fs.existsSync(pythonOutputDir)) {
      fs.rmSync(pythonOutputDir, { recursive: true, force: true });
    }

    // Create output directories
    fs.mkdirSync(tsOutputDir, { recursive: true });
    fs.mkdirSync(pythonOutputDir, { recursive: true }); 
    
    // Generate TypeScript client
    console.log("üì¶ Generating TypeScript client...");
    execSync(
      `npx @openapitools/openapi-generator-cli generate ` +
        `-i ./openapi.json ` +
        `-g typescript-axios ` +
        `-o ./src/prometheos-client-generated ` +
        `--additional-properties=npmName=prometheos-client,npmVersion=1.0.0,withSeparateModelsAndApi=true,modelPackage=models,apiPackage=api,supportsES6=true,enumPropertyNaming=camelCase,useSingleRequestParameter=true,generateSourceCodeOnly=true`,
      {
        stdio: "inherit",
        cwd: process.cwd(),
      }
    );
    console.log("‚úÖ TypeScript client generated successfully!");

    // Generate Python client
    console.log("üêç Generating Python client...");
    execSync(
      `npx @openapitools/openapi-generator-cli generate ` +
        `-i ./openapi.json ` +
        `-g python ` +
        `-o ./src/prometheos-client-python-generated ` +
        `--additional-properties=packageName=prometheos_client,packageVersion=1.0.0,projectName=prometheos-client,library=asyncio`,
      {
        stdio: "inherit",
        cwd: process.cwd(),
      }
    );
    console.log("‚úÖ Python client generated successfully!");

    // Apply ESLint fixes to TypeScript generated files
    try {
      console.log("üîß Applying ESLint fixes to TypeScript generated code...");
      execSync(`npx eslint ${tsOutputDir} --fix`, {
        stdio: "inherit",
        cwd: process.cwd(),
      });
      console.log("‚úÖ ESLint fixes applied successfully!");
    } catch (lintError) {
      console.warn(
        "‚ö†Ô∏è  ESLint fixes failed, but generation completed:",
        lintError.message
      );
    }

    // Create custom wrappers
    createTypeScriptWrapper();
    createPythonWrapper();

    console.log("üéâ Unified client generation completed successfully!");
  } catch (error) {
    console.error("‚ùå Failed to generate unified clients:", error.message);
    process.exit(1);
  }
}

/**
 * Create a custom TypeScript wrapper that integrates with the desktop bridge
 */
function createTypeScriptWrapper() {
  console.log("üîß Creating TypeScript wrapper...");
  const wrapperContent = `// Generated by scripts/generate-unified-client.js
// This file wraps the OpenAPI Generator TypeScript client with our desktop bridge

// Re-export all generated types and APIs
export * from '../prometheos-client-generated';

// Import the generated APIs and types
import { Configuration, DefaultApi } from '../prometheos-client-generated';

// Desktop API interface for type safety
interface DesktopBridge {
  api: {
    execute(componentId: string, actionId: string, params?: Record<string, unknown>): Promise<unknown>;
  };
}

// Global desktop API interface
declare global {
  const desktop: DesktopBridge;
}

// Create a custom API client that uses our desktop bridge
class DesktopApiClient {
  async execute(componentId: string, actionId: string, params?: Record<string, unknown>): Promise<unknown> {
    // Use proper type checking without any
    if (typeof globalThis !== 'undefined' && 'desktop' in globalThis) {
      const globalWithDesktop = globalThis as typeof globalThis & { desktop?: DesktopBridge };
      if (globalWithDesktop.desktop?.api?.execute) {
        return globalWithDesktop.desktop.api.execute(componentId, actionId, params);
      }
    }
    throw new Error('Desktop API bridge not available');
  }
}

// Create API instance that uses our desktop bridge
const desktopClient = new DesktopApiClient();

// Consolidated services API using the unified "/api/services" endpoint
export const services = {
  async launchApp(params: { appId: string }) {
    return desktopClient.execute('services', 'launchApp', params);
  },
  async killApp(params: { appId: string }) {
    return desktopClient.execute('services', 'killApp', params);
  },
  async notify(params: { message: string; type?: 'radix' | 'sonner' }) {
    return desktopClient.execute('services', 'notify', params);
  },
  async openDialog(params: { 
    title: string; 
    description?: string; 
    confirmLabel?: string; 
    cancelLabel?: string; 
  }) {
    return desktopClient.execute('services', 'openDialog', params);
  },
  async waitForEvent(params: { eventId: string; timeout?: number }) {
    return desktopClient.execute('services', 'waitForEvent', params);
  },
  async listEvents(params: Record<string, never> = {}) {
    return desktopClient.execute('services', 'listEvents', params);
  }
};

// Export low-level API access
export const api = {
  execute: desktopClient.execute.bind(desktopClient)
};

// Default export
export default {
  services,
  api
};
`;

  // Write the wrapper file
  fs.writeFileSync("./src/prometheos-client/index.ts", wrapperContent);
  console.log("‚úÖ TypeScript wrapper created successfully!");
}

/**
 * Create a custom Python wrapper that integrates with the desktop bridge
 */
function createPythonWrapper() {
  console.log("üêç Creating Python wrapper...");

  // Ensure the Python client directory exists
  const pythonClientDir = "./src/prometheos-client-python";
  if (!fs.existsSync(pythonClientDir)) {
    fs.mkdirSync(pythonClientDir, { recursive: true });
  }

  const wrapperContent = `"""
Generated by scripts/generate-unified-client.js
This file wraps the OpenAPI Generator Python client with our desktop bridge

PrometheOS Python Client
Provides a Python API for interacting with the PrometheOS desktop environment.
"""

import asyncio
from typing import Any, Dict, Optional, Union
import js

# Re-export generated client components
try:
    # Try relative import first (development environment)
    from ..prometheos_client_python_generated import *
except ImportError:
    try:
        # Try absolute import (Pyodide environment)
        from prometheos_client_python_generated.prometheos_client import *
    except ImportError:
        # Handle case where generated client is not available
        print("Warning: Generated client components not available")
        pass


class DesktopBridge:
    """Desktop API bridge for Python/Pyodide environment"""
    
    def __init__(self):
        self._desktop = None
        self._check_desktop_availability()
    
    def _check_desktop_availability(self):
        """Check if desktop API is available in the global scope"""
        try:
            # In Pyodide, we can access JavaScript globals through js module
            if hasattr(js, 'desktop') and hasattr(js.desktop, 'api'):
                self._desktop = js.desktop
            else:
                raise RuntimeError("Desktop API bridge not available")
        except Exception as e:
            raise RuntimeError(f"Failed to access desktop API: {e}")
    
    async def execute(self, component_id: str, action_id: str, params: Optional[Dict[str, Any]] = None) -> Any:
        """Execute an API call through the desktop bridge"""
        if not self._desktop:
            raise RuntimeError("Desktop API bridge not available")
        
        try:
            # Convert Python dict to JavaScript object if needed
            js_params = js.Object.fromEntries(params.items()) if params else js.undefined
            
            # Call the desktop API and await the result
            result = await self._desktop.api.execute(component_id, action_id, js_params)
            
            # Convert JavaScript result back to Python if needed
            return result.to_py() if hasattr(result, 'to_py') else result
        except Exception as e:
            raise RuntimeError(f"Desktop API call failed: {e}")


# Global desktop client instance
_desktop_client = DesktopBridge()


class Services:
    """Consolidated services API for app management, notifications, dialogs, and events"""
    
    @staticmethod
    async def launch_app(app_id: str) -> Any:
        """Launch an application by ID"""
        return await _desktop_client.execute('services', 'launchApp', {'appId': app_id})
    
    @staticmethod
    async def kill_app(app_id: str) -> Any:
        """Kill an application by ID"""
        return await _desktop_client.execute('services', 'killApp', {'appId': app_id})
    
    @staticmethod
    async def notify(message: str, notification_type: str = 'radix') -> Any:
        """Show a notification"""
        return await _desktop_client.execute('services', 'notify', {
            'message': message,
            'type': notification_type
        })
    
    @staticmethod
    async def open_dialog(
        title: str,
        description: Optional[str] = None,
        confirm_label: Optional[str] = None,
        cancel_label: Optional[str] = None
    ) -> Any:
        """Open a dialog box"""
        params = {'title': title}
        if description:
            params['description'] = description
        if confirm_label:
            params['confirmLabel'] = confirm_label
        if cancel_label:
            params['cancelLabel'] = cancel_label
        
        return await _desktop_client.execute('services', 'openDialog', params)
    
    @staticmethod
    async def wait_for_event(event_id: str, timeout: Optional[int] = None) -> Any:
        """Wait for a specific event"""
        params = {'eventId': event_id}
        if timeout:
            params['timeout'] = timeout
        
        return await _desktop_client.execute('services', 'waitForEvent', params)
    
    @staticmethod
    async def list_events() -> Any:
        """List all available events"""
        return await _desktop_client.execute('services', 'listEvents', {})


class Api:
    """Low-level API access"""
    
    @staticmethod
    async def execute(component_id: str, action_id: str, params: Optional[Dict[str, Any]] = None) -> Any:
        """Execute a low-level API call"""
        return await _desktop_client.execute(component_id, action_id, params)


# Create instances for convenience
services = Services()
api = Api()

# Export everything
__all__ = [
    'DesktopBridge',
    'Services',
    'Api',
    # Instances
    'services',
    'api'
]
`;

  const initContent = `"""
PrometheOS Python Client Package
"""

from .prometheos_client import *

__version__ = "1.0.0"
__author__ = "PrometheOS Team"
__description__ = "Python client for PrometheOS desktop environment"
`;

  const exampleContent = `"""
Example usage of the PrometheOS Python client

This demonstrates how to use the Python client in both import styles:
1. Import the generated client components
2. Use the convenience wrapper functions
"""

import asyncio
from prometheos_client import services, api

async def example_basic_usage():
    """Basic usage examples"""
    
    # Launch an application (recommended: use services)
    try:
        result = await services.launch_app("audioplayer")
        print(f"Launched app: {result}")
    except Exception as e:
        print(f"Failed to launch app: {e}")
    
    # Show a notification (recommended: use services)
    try:
        await services.notify("Hello from Python!", "radix")
        print("Notification sent successfully")
    except Exception as e:
        print(f"Failed to send notification: {e}")
    
    # Open a dialog (recommended: use services)
    try:
        result = await services.open_dialog(
            title="Python Dialog",
            description="This dialog was opened from Python!",
            confirm_label="OK",
            cancel_label="Cancel"
        )
        print(f"Dialog result: {result}")
    except Exception as e:
        print(f"Failed to open dialog: {e}")

async def example_event_handling():
    """Event handling examples"""
    
    # List available events (recommended: use services)
    try:
        events = await services.list_events()
        print(f"Available events: {events}")
    except Exception as e:
        print(f"Failed to list events: {e}")
    
    # Wait for a specific event (recommended: use services)
    try:
        result = await services.wait_for_event("app-launched", timeout=5000)
        print(f"Event received: {result}")
    except Exception as e:
        print(f"Failed to wait for event: {e}")

async def example_low_level_api():
    """Low-level API access examples"""
    
    # Direct API calls
    try:
        # Kill an app using low-level API
        result = await api.execute("services", "killApp", {"appId": "audioplayer"})
        print(f"Kill app result: {result}")
    except Exception as e:
        print(f"Failed to execute API call: {e}")

async def main():
    """Main example function"""
    print("üêç PrometheOS Python Client Examples")
    print("=" * 40)
    
    print("\\n1. Basic Usage (Recommended):")
    await example_basic_usage()
    
    print("\\n2. Event Handling:")
    await example_event_handling()
    
    print("\\n3. Low-level API:")
    await example_low_level_api()

# Run examples (only in Pyodide environment)
if __name__ == "__main__":
    try:
        # In Pyodide, we need to use asyncio differently
        import js
        if hasattr(js, 'desktop'):
            asyncio.create_task(main())
        else:
            print("‚ö†Ô∏è  Desktop API not available. Run this in the PrometheOS environment.")
    except ImportError:
        print("‚ö†Ô∏è  This example requires the Pyodide environment.")
`;

  // Write Python files
  fs.writeFileSync(`${pythonClientDir}/prometheos_client.py`, wrapperContent);
  fs.writeFileSync(`${pythonClientDir}/__init__.py`, initContent);
  fs.writeFileSync(`${pythonClientDir}/example_usage.py`, exampleContent);

  console.log("‚úÖ Python wrapper created successfully!");
}

// Run the generation
generateUnifiedClients();
