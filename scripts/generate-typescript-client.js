// scripts/generate-typescript-client.js
import fs from "fs";
import path from "path";
import { execSync } from "child_process";

/**
 * Generate TypeScript client using swagger-typescript-api
 */
function generateTypeScriptClient() {
  console.log("üî• Generating TypeScript client with swagger-typescript-api...");

  try {
    // Clean up previous generated files
    const outputDir = "./src/prometheos-client-generated";
    if (fs.existsSync(outputDir)) {
      fs.rmSync(outputDir, { recursive: true, force: true });
    }

    // Create output directory
    fs.mkdirSync(outputDir, { recursive: true }); // Generate using swagger-typescript-api with inline options
    execSync(
      `npx swagger-typescript-api generate -p ./openapi.json -o ${outputDir} -n api.ts --extract-enums --sort-types --sort-routes`,
      {
        stdio: "inherit",
        cwd: process.cwd(),
      }
    );
    console.log("‚úÖ TypeScript client generated successfully!");

    // Apply ESLint fixes to generated files
    try {
      console.log("üîß Applying ESLint fixes to generated code...");
      execSync(`npx eslint ${outputDir} --fix`, {
        stdio: "inherit",
        cwd: process.cwd(),
      });
      console.log("‚úÖ ESLint fixes applied successfully!");
    } catch (lintError) {
      console.warn(
        "‚ö†Ô∏è  ESLint fixes failed, but generation completed:",
        lintError.message
      );
    }

    // Create our custom wrapper that integrates with the desktop bridge
    createCustomWrapper();
  } catch (error) {
    console.error("‚ùå Failed to generate TypeScript client:", error.message);
    process.exit(1);
  }
}

/**
 * Create a custom wrapper that combines the generated client with our desktop bridge
 */
function createCustomWrapper() {
  console.log("üîß Creating custom wrapper...");
  const wrapperContent = `// Generated by scripts/generate-typescript-client.js
// This file wraps the swagger-typescript-api generated client with our desktop bridge

// Re-export all generated types and APIs
export * from '../prometheos-client-generated/api';

// Import the generated APIs and types
import { Api } from '../prometheos-client-generated/api';

// Desktop API interface for type safety
interface DesktopBridge {
  api: {
    execute(componentId: string, actionId: string, params?: Record<string, unknown>): Promise<unknown>;
  };
}

// Global desktop API interface
declare global {
  const desktop: DesktopBridge;
}

// Create a custom API client that uses our desktop bridge
class DesktopApiClient {
  async execute(componentId: string, actionId: string, params?: Record<string, unknown>): Promise<unknown> {
    // Use proper type checking without any
    if (typeof globalThis !== 'undefined' && 'desktop' in globalThis) {
      const globalWithDesktop = globalThis as typeof globalThis & { desktop?: DesktopBridge };
      if (globalWithDesktop.desktop?.api?.execute) {
        return globalWithDesktop.desktop.api.execute(componentId, actionId, params);
      }
    }
    throw new Error('Desktop API bridge not available');
  }
}

// Create API instance that uses our desktop bridge
const desktopClient = new DesktopApiClient();

// Create namespaced API instances that use our bridge
export const launcher = {
  async launchApp(params: { appId: string }) {
    return desktopClient.execute('launcher', 'launchApp', params);
  },
  async killApp(params: { appId: string }) {
    return desktopClient.execute('launcher', 'killApp', params);
  },
  async notify(params: { message: string; type?: 'radix' | 'sonner' }) {
    return desktopClient.execute('launcher', 'notify', params);
  }
};

export const dialog = {
  async openDialog(params: { 
    title: string; 
    description?: string; 
    confirmLabel?: string; 
    cancelLabel?: string; 
  }) {
    return desktopClient.execute('dialog', 'openDialog', params);
  }
};

export const onEvent = {
  async waitForEvent(params: { eventId: string; timeout?: number }) {
    return desktopClient.execute('onEvent', 'waitForEvent', params);
  }
};

export const event = {
  async listEvents(params: Record<string, never> = {}) {
    return desktopClient.execute('event', 'listEvents', params);
  }
};

// Export low-level API access
export const api = {
  execute: desktopClient.execute.bind(desktopClient)
};

// Default export
export default {
  launcher,
  dialog,
  onEvent,
  event,
  api
};
`;

  // Write the wrapper file
  fs.writeFileSync("./src/prometheos-client/index.ts", wrapperContent);

  console.log("‚úÖ Custom wrapper created successfully!");
}

// Run the generation
generateTypeScriptClient();
