/* tslint:disable */
/* eslint-disable */
/**
 * PrometheOS API
 * API for AI agent interaction with the PrometheOS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ServicesKillAppRequest } from '../models';
// @ts-ignore
import type { ServicesLaunchApp200Response } from '../models';
// @ts-ignore
import type { ServicesLaunchApp400Response } from '../models';
// @ts-ignore
import type { ServicesLaunchAppRequest } from '../models';
// @ts-ignore
import type { ServicesNotifyRequest } from '../models';
// @ts-ignore
import type { ServicesOpenDialogRequest } from '../models';
// @ts-ignore
import type { ServicesWaitForEventRequest } from '../models';
/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Closes an app by its ID
         * @summary Kill App
         * @param {ServicesKillAppRequest} servicesKillAppRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesKillApp: async (servicesKillAppRequest: ServicesKillAppRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'servicesKillAppRequest' is not null or undefined
            assertParamExists('servicesKillApp', 'servicesKillAppRequest', servicesKillAppRequest)
            const localVarPath = `/api/services/killApp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(servicesKillAppRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Launch an app by its ID
         * @summary Launch App
         * @param {ServicesLaunchAppRequest} servicesLaunchAppRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLaunchApp: async (servicesLaunchAppRequest: ServicesLaunchAppRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'servicesLaunchAppRequest' is not null or undefined
            assertParamExists('servicesLaunchApp', 'servicesLaunchAppRequest', servicesLaunchAppRequest)
            const localVarPath = `/api/services/launchApp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(servicesLaunchAppRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all known event names
         * @summary List Events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesListEvents: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/services/listEvents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show a notification on screen
         * @summary Notify
         * @param {ServicesNotifyRequest} servicesNotifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesNotify: async (servicesNotifyRequest: ServicesNotifyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'servicesNotifyRequest' is not null or undefined
            assertParamExists('servicesNotify', 'servicesNotifyRequest', servicesNotifyRequest)
            const localVarPath = `/api/services/notify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(servicesNotifyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Opens a confirmation dialog and returns whether the user confirmed
         * @summary Open Dialog
         * @param {ServicesOpenDialogRequest} servicesOpenDialogRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesOpenDialog: async (servicesOpenDialogRequest: ServicesOpenDialogRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'servicesOpenDialogRequest' is not null or undefined
            assertParamExists('servicesOpenDialog', 'servicesOpenDialogRequest', servicesOpenDialogRequest)
            const localVarPath = `/api/services/openDialog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(servicesOpenDialogRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Waits for the specified event to be emitted or until the timeout is reached
         * @summary Wait For Event
         * @param {ServicesWaitForEventRequest} servicesWaitForEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesWaitForEvent: async (servicesWaitForEventRequest: ServicesWaitForEventRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'servicesWaitForEventRequest' is not null or undefined
            assertParamExists('servicesWaitForEvent', 'servicesWaitForEventRequest', servicesWaitForEventRequest)
            const localVarPath = `/api/services/waitForEvent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(servicesWaitForEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Closes an app by its ID
         * @summary Kill App
         * @param {ServicesKillAppRequest} servicesKillAppRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesKillApp(servicesKillAppRequest: ServicesKillAppRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicesLaunchApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesKillApp(servicesKillAppRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.servicesKillApp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Launch an app by its ID
         * @summary Launch App
         * @param {ServicesLaunchAppRequest} servicesLaunchAppRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesLaunchApp(servicesLaunchAppRequest: ServicesLaunchAppRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicesLaunchApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesLaunchApp(servicesLaunchAppRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.servicesLaunchApp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns all known event names
         * @summary List Events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesListEvents(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicesLaunchApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesListEvents(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.servicesListEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Show a notification on screen
         * @summary Notify
         * @param {ServicesNotifyRequest} servicesNotifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesNotify(servicesNotifyRequest: ServicesNotifyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicesLaunchApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesNotify(servicesNotifyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.servicesNotify']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Opens a confirmation dialog and returns whether the user confirmed
         * @summary Open Dialog
         * @param {ServicesOpenDialogRequest} servicesOpenDialogRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesOpenDialog(servicesOpenDialogRequest: ServicesOpenDialogRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicesLaunchApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesOpenDialog(servicesOpenDialogRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.servicesOpenDialog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Waits for the specified event to be emitted or until the timeout is reached
         * @summary Wait For Event
         * @param {ServicesWaitForEventRequest} servicesWaitForEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesWaitForEvent(servicesWaitForEventRequest: ServicesWaitForEventRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicesLaunchApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesWaitForEvent(servicesWaitForEventRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.servicesWaitForEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * Closes an app by its ID
         * @summary Kill App
         * @param {SystemApiServicesKillAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesKillApp(requestParameters: SystemApiServicesKillAppRequest, options?: RawAxiosRequestConfig): AxiosPromise<ServicesLaunchApp200Response> {
            return localVarFp.servicesKillApp(requestParameters.servicesKillAppRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Launch an app by its ID
         * @summary Launch App
         * @param {SystemApiServicesLaunchAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesLaunchApp(requestParameters: SystemApiServicesLaunchAppRequest, options?: RawAxiosRequestConfig): AxiosPromise<ServicesLaunchApp200Response> {
            return localVarFp.servicesLaunchApp(requestParameters.servicesLaunchAppRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all known event names
         * @summary List Events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesListEvents(options?: RawAxiosRequestConfig): AxiosPromise<ServicesLaunchApp200Response> {
            return localVarFp.servicesListEvents(options).then((request) => request(axios, basePath));
        },
        /**
         * Show a notification on screen
         * @summary Notify
         * @param {SystemApiServicesNotifyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesNotify(requestParameters: SystemApiServicesNotifyRequest, options?: RawAxiosRequestConfig): AxiosPromise<ServicesLaunchApp200Response> {
            return localVarFp.servicesNotify(requestParameters.servicesNotifyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Opens a confirmation dialog and returns whether the user confirmed
         * @summary Open Dialog
         * @param {SystemApiServicesOpenDialogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesOpenDialog(requestParameters: SystemApiServicesOpenDialogRequest, options?: RawAxiosRequestConfig): AxiosPromise<ServicesLaunchApp200Response> {
            return localVarFp.servicesOpenDialog(requestParameters.servicesOpenDialogRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Waits for the specified event to be emitted or until the timeout is reached
         * @summary Wait For Event
         * @param {SystemApiServicesWaitForEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesWaitForEvent(requestParameters: SystemApiServicesWaitForEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<ServicesLaunchApp200Response> {
            return localVarFp.servicesWaitForEvent(requestParameters.servicesWaitForEventRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for servicesKillApp operation in SystemApi.
 * @export
 * @interface SystemApiServicesKillAppRequest
 */
export interface SystemApiServicesKillAppRequest {
    /**
     * 
     * @type {ServicesKillAppRequest}
     * @memberof SystemApiServicesKillApp
     */
    readonly servicesKillAppRequest: ServicesKillAppRequest
}

/**
 * Request parameters for servicesLaunchApp operation in SystemApi.
 * @export
 * @interface SystemApiServicesLaunchAppRequest
 */
export interface SystemApiServicesLaunchAppRequest {
    /**
     * 
     * @type {ServicesLaunchAppRequest}
     * @memberof SystemApiServicesLaunchApp
     */
    readonly servicesLaunchAppRequest: ServicesLaunchAppRequest
}

/**
 * Request parameters for servicesNotify operation in SystemApi.
 * @export
 * @interface SystemApiServicesNotifyRequest
 */
export interface SystemApiServicesNotifyRequest {
    /**
     * 
     * @type {ServicesNotifyRequest}
     * @memberof SystemApiServicesNotify
     */
    readonly servicesNotifyRequest: ServicesNotifyRequest
}

/**
 * Request parameters for servicesOpenDialog operation in SystemApi.
 * @export
 * @interface SystemApiServicesOpenDialogRequest
 */
export interface SystemApiServicesOpenDialogRequest {
    /**
     * 
     * @type {ServicesOpenDialogRequest}
     * @memberof SystemApiServicesOpenDialog
     */
    readonly servicesOpenDialogRequest: ServicesOpenDialogRequest
}

/**
 * Request parameters for servicesWaitForEvent operation in SystemApi.
 * @export
 * @interface SystemApiServicesWaitForEventRequest
 */
export interface SystemApiServicesWaitForEventRequest {
    /**
     * 
     * @type {ServicesWaitForEventRequest}
     * @memberof SystemApiServicesWaitForEvent
     */
    readonly servicesWaitForEventRequest: ServicesWaitForEventRequest
}

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * Closes an app by its ID
     * @summary Kill App
     * @param {SystemApiServicesKillAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public servicesKillApp(requestParameters: SystemApiServicesKillAppRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).servicesKillApp(requestParameters.servicesKillAppRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Launch an app by its ID
     * @summary Launch App
     * @param {SystemApiServicesLaunchAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public servicesLaunchApp(requestParameters: SystemApiServicesLaunchAppRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).servicesLaunchApp(requestParameters.servicesLaunchAppRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all known event names
     * @summary List Events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public servicesListEvents(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).servicesListEvents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show a notification on screen
     * @summary Notify
     * @param {SystemApiServicesNotifyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public servicesNotify(requestParameters: SystemApiServicesNotifyRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).servicesNotify(requestParameters.servicesNotifyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Opens a confirmation dialog and returns whether the user confirmed
     * @summary Open Dialog
     * @param {SystemApiServicesOpenDialogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public servicesOpenDialog(requestParameters: SystemApiServicesOpenDialogRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).servicesOpenDialog(requestParameters.servicesOpenDialogRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Waits for the specified event to be emitted or until the timeout is reached
     * @summary Wait For Event
     * @param {SystemApiServicesWaitForEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public servicesWaitForEvent(requestParameters: SystemApiServicesWaitForEventRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).servicesWaitForEvent(requestParameters.servicesWaitForEventRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

