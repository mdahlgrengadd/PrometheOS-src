/* tslint:disable */
/* eslint-disable */
/**
 * PrometheOS API
 * API for AI agent interaction with the PrometheOS
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DialogOpenDialogRequest } from '../models';
// @ts-ignore
import type { LauncherKillAppRequest } from '../models';
// @ts-ignore
import type { LauncherLaunchApp200Response } from '../models';
// @ts-ignore
import type { LauncherLaunchApp400Response } from '../models';
// @ts-ignore
import type { LauncherLaunchAppRequest } from '../models';
// @ts-ignore
import type { LauncherNotifyRequest } from '../models';
// @ts-ignore
import type { OnEventWaitForEventRequest } from '../models';
/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Opens a confirmation dialog and returns whether the user confirmed
         * @summary Open Dialog
         * @param {DialogOpenDialogRequest} dialogOpenDialogRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dialogOpenDialog: async (dialogOpenDialogRequest: DialogOpenDialogRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dialogOpenDialogRequest' is not null or undefined
            assertParamExists('dialogOpenDialog', 'dialogOpenDialogRequest', dialogOpenDialogRequest)
            const localVarPath = `/api/dialog/openDialog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dialogOpenDialogRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all known event names
         * @summary List Events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventListEvents: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/event/listEvents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Closes an app by its ID
         * @summary Kill App
         * @param {LauncherKillAppRequest} launcherKillAppRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launcherKillApp: async (launcherKillAppRequest: LauncherKillAppRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'launcherKillAppRequest' is not null or undefined
            assertParamExists('launcherKillApp', 'launcherKillAppRequest', launcherKillAppRequest)
            const localVarPath = `/api/launcher/killApp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(launcherKillAppRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Launch an app by its ID
         * @summary Launch App
         * @param {LauncherLaunchAppRequest} launcherLaunchAppRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launcherLaunchApp: async (launcherLaunchAppRequest: LauncherLaunchAppRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'launcherLaunchAppRequest' is not null or undefined
            assertParamExists('launcherLaunchApp', 'launcherLaunchAppRequest', launcherLaunchAppRequest)
            const localVarPath = `/api/launcher/launchApp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(launcherLaunchAppRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show a notification on screen
         * @summary Notify
         * @param {LauncherNotifyRequest} launcherNotifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launcherNotify: async (launcherNotifyRequest: LauncherNotifyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'launcherNotifyRequest' is not null or undefined
            assertParamExists('launcherNotify', 'launcherNotifyRequest', launcherNotifyRequest)
            const localVarPath = `/api/launcher/notify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(launcherNotifyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Waits for the specified event to be emitted or until the timeout is reached
         * @summary Wait For Event
         * @param {OnEventWaitForEventRequest} onEventWaitForEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onEventWaitForEvent: async (onEventWaitForEventRequest: OnEventWaitForEventRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'onEventWaitForEventRequest' is not null or undefined
            assertParamExists('onEventWaitForEvent', 'onEventWaitForEventRequest', onEventWaitForEventRequest)
            const localVarPath = `/api/onEvent/waitForEvent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(onEventWaitForEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Opens a confirmation dialog and returns whether the user confirmed
         * @summary Open Dialog
         * @param {DialogOpenDialogRequest} dialogOpenDialogRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dialogOpenDialog(dialogOpenDialogRequest: DialogOpenDialogRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LauncherLaunchApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dialogOpenDialog(dialogOpenDialogRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.dialogOpenDialog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns all known event names
         * @summary List Events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventListEvents(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LauncherLaunchApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventListEvents(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.eventListEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Closes an app by its ID
         * @summary Kill App
         * @param {LauncherKillAppRequest} launcherKillAppRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async launcherKillApp(launcherKillAppRequest: LauncherKillAppRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LauncherLaunchApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.launcherKillApp(launcherKillAppRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.launcherKillApp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Launch an app by its ID
         * @summary Launch App
         * @param {LauncherLaunchAppRequest} launcherLaunchAppRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async launcherLaunchApp(launcherLaunchAppRequest: LauncherLaunchAppRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LauncherLaunchApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.launcherLaunchApp(launcherLaunchAppRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.launcherLaunchApp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Show a notification on screen
         * @summary Notify
         * @param {LauncherNotifyRequest} launcherNotifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async launcherNotify(launcherNotifyRequest: LauncherNotifyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LauncherLaunchApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.launcherNotify(launcherNotifyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.launcherNotify']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Waits for the specified event to be emitted or until the timeout is reached
         * @summary Wait For Event
         * @param {OnEventWaitForEventRequest} onEventWaitForEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async onEventWaitForEvent(onEventWaitForEventRequest: OnEventWaitForEventRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LauncherLaunchApp200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.onEventWaitForEvent(onEventWaitForEventRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SystemApi.onEventWaitForEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * Opens a confirmation dialog and returns whether the user confirmed
         * @summary Open Dialog
         * @param {SystemApiDialogOpenDialogRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dialogOpenDialog(requestParameters: SystemApiDialogOpenDialogRequest, options?: RawAxiosRequestConfig): AxiosPromise<LauncherLaunchApp200Response> {
            return localVarFp.dialogOpenDialog(requestParameters.dialogOpenDialogRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all known event names
         * @summary List Events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventListEvents(options?: RawAxiosRequestConfig): AxiosPromise<LauncherLaunchApp200Response> {
            return localVarFp.eventListEvents(options).then((request) => request(axios, basePath));
        },
        /**
         * Closes an app by its ID
         * @summary Kill App
         * @param {SystemApiLauncherKillAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launcherKillApp(requestParameters: SystemApiLauncherKillAppRequest, options?: RawAxiosRequestConfig): AxiosPromise<LauncherLaunchApp200Response> {
            return localVarFp.launcherKillApp(requestParameters.launcherKillAppRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Launch an app by its ID
         * @summary Launch App
         * @param {SystemApiLauncherLaunchAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launcherLaunchApp(requestParameters: SystemApiLauncherLaunchAppRequest, options?: RawAxiosRequestConfig): AxiosPromise<LauncherLaunchApp200Response> {
            return localVarFp.launcherLaunchApp(requestParameters.launcherLaunchAppRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Show a notification on screen
         * @summary Notify
         * @param {SystemApiLauncherNotifyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        launcherNotify(requestParameters: SystemApiLauncherNotifyRequest, options?: RawAxiosRequestConfig): AxiosPromise<LauncherLaunchApp200Response> {
            return localVarFp.launcherNotify(requestParameters.launcherNotifyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Waits for the specified event to be emitted or until the timeout is reached
         * @summary Wait For Event
         * @param {SystemApiOnEventWaitForEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        onEventWaitForEvent(requestParameters: SystemApiOnEventWaitForEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<LauncherLaunchApp200Response> {
            return localVarFp.onEventWaitForEvent(requestParameters.onEventWaitForEventRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for dialogOpenDialog operation in SystemApi.
 * @export
 * @interface SystemApiDialogOpenDialogRequest
 */
export interface SystemApiDialogOpenDialogRequest {
    /**
     * 
     * @type {DialogOpenDialogRequest}
     * @memberof SystemApiDialogOpenDialog
     */
    readonly dialogOpenDialogRequest: DialogOpenDialogRequest
}

/**
 * Request parameters for launcherKillApp operation in SystemApi.
 * @export
 * @interface SystemApiLauncherKillAppRequest
 */
export interface SystemApiLauncherKillAppRequest {
    /**
     * 
     * @type {LauncherKillAppRequest}
     * @memberof SystemApiLauncherKillApp
     */
    readonly launcherKillAppRequest: LauncherKillAppRequest
}

/**
 * Request parameters for launcherLaunchApp operation in SystemApi.
 * @export
 * @interface SystemApiLauncherLaunchAppRequest
 */
export interface SystemApiLauncherLaunchAppRequest {
    /**
     * 
     * @type {LauncherLaunchAppRequest}
     * @memberof SystemApiLauncherLaunchApp
     */
    readonly launcherLaunchAppRequest: LauncherLaunchAppRequest
}

/**
 * Request parameters for launcherNotify operation in SystemApi.
 * @export
 * @interface SystemApiLauncherNotifyRequest
 */
export interface SystemApiLauncherNotifyRequest {
    /**
     * 
     * @type {LauncherNotifyRequest}
     * @memberof SystemApiLauncherNotify
     */
    readonly launcherNotifyRequest: LauncherNotifyRequest
}

/**
 * Request parameters for onEventWaitForEvent operation in SystemApi.
 * @export
 * @interface SystemApiOnEventWaitForEventRequest
 */
export interface SystemApiOnEventWaitForEventRequest {
    /**
     * 
     * @type {OnEventWaitForEventRequest}
     * @memberof SystemApiOnEventWaitForEvent
     */
    readonly onEventWaitForEventRequest: OnEventWaitForEventRequest
}

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * Opens a confirmation dialog and returns whether the user confirmed
     * @summary Open Dialog
     * @param {SystemApiDialogOpenDialogRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public dialogOpenDialog(requestParameters: SystemApiDialogOpenDialogRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).dialogOpenDialog(requestParameters.dialogOpenDialogRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all known event names
     * @summary List Events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public eventListEvents(options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).eventListEvents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Closes an app by its ID
     * @summary Kill App
     * @param {SystemApiLauncherKillAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public launcherKillApp(requestParameters: SystemApiLauncherKillAppRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).launcherKillApp(requestParameters.launcherKillAppRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Launch an app by its ID
     * @summary Launch App
     * @param {SystemApiLauncherLaunchAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public launcherLaunchApp(requestParameters: SystemApiLauncherLaunchAppRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).launcherLaunchApp(requestParameters.launcherLaunchAppRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show a notification on screen
     * @summary Notify
     * @param {SystemApiLauncherNotifyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public launcherNotify(requestParameters: SystemApiLauncherNotifyRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).launcherNotify(requestParameters.launcherNotifyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Waits for the specified event to be emitted or until the timeout is reached
     * @summary Wait For Event
     * @param {SystemApiOnEventWaitForEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public onEventWaitForEvent(requestParameters: SystemApiOnEventWaitForEventRequest, options?: RawAxiosRequestConfig) {
        return SystemApiFp(this.configuration).onEventWaitForEvent(requestParameters.onEventWaitForEventRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

