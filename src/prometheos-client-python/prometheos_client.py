"""
Generated by scripts/generate-unified-client.js
This file wraps the OpenAPI Generator Python client with our desktop bridge

PrometheOS Python Client
Provides a Python API for interacting with the PrometheOS desktop environment.
"""

import asyncio
from typing import Any, Dict, Optional, Union
import js

# Re-export generated client components
try:
    # Try relative import first (development environment)
    from ..prometheos_client_python_generated import *
except ImportError:
    try:
        # Try absolute import (Pyodide environment)
        from prometheos_client_python_generated.prometheos_client import *
    except ImportError:
        # Handle case where generated client is not available
        print("Warning: Generated client components not available")
        pass


class DesktopBridge:
    """Desktop API bridge for Python/Pyodide environment"""
    
    def __init__(self):
        self._desktop = None
        self._check_desktop_availability()
    
    def _check_desktop_availability(self):
        """Check if desktop API is available in the global scope"""
        try:
            # In Pyodide, we can access JavaScript globals through js module
            if hasattr(js, 'desktop') and hasattr(js.desktop, 'api'):
                self._desktop = js.desktop
            else:
                raise RuntimeError("Desktop API bridge not available")
        except Exception as e:
            raise RuntimeError(f"Failed to access desktop API: {e}")
    
    async def execute(self, component_id: str, action_id: str, params: Optional[Dict[str, Any]] = None) -> Any:
        """Execute an API call through the desktop bridge"""
        if not self._desktop:
            raise RuntimeError("Desktop API bridge not available")
        
        try:
            # Convert Python dict to JavaScript object if needed
            js_params = js.Object.fromEntries(params.items()) if params else js.undefined
            
            # Call the desktop API and await the result
            result = await self._desktop.api.execute(component_id, action_id, js_params)
            
            # Convert JavaScript result back to Python if needed
            return result.to_py() if hasattr(result, 'to_py') else result
        except Exception as e:
            raise RuntimeError(f"Desktop API call failed: {e}")


# Global desktop client instance
_desktop_client = DesktopBridge()


class Services:
    """Consolidated services API for app management, notifications, dialogs, and events"""
    
    @staticmethod
    async def launch_app(app_id: str) -> Any:
        """Launch an application by ID"""
        return await _desktop_client.execute('services', 'launchApp', {'appId': app_id})
    
    @staticmethod
    async def kill_app(app_id: str) -> Any:
        """Kill an application by ID"""
        return await _desktop_client.execute('services', 'killApp', {'appId': app_id})
    
    @staticmethod
    async def notify(message: str, notification_type: str = 'radix') -> Any:
        """Show a notification"""
        return await _desktop_client.execute('services', 'notify', {
            'message': message,
            'type': notification_type
        })
    
    @staticmethod
    async def open_dialog(
        title: str,
        description: Optional[str] = None,
        confirm_label: Optional[str] = None,
        cancel_label: Optional[str] = None
    ) -> Any:
        """Open a dialog box"""
        params = {'title': title}
        if description:
            params['description'] = description
        if confirm_label:
            params['confirmLabel'] = confirm_label
        if cancel_label:
            params['cancelLabel'] = cancel_label
        
        return await _desktop_client.execute('services', 'openDialog', params)
    
    @staticmethod
    async def wait_for_event(event_id: str, timeout: Optional[int] = None) -> Any:
        """Wait for a specific event"""
        params = {'eventId': event_id}
        if timeout:
            params['timeout'] = timeout
        
        return await _desktop_client.execute('services', 'waitForEvent', params)
    
    @staticmethod
    async def list_events() -> Any:
        """List all available events"""
        return await _desktop_client.execute('services', 'listEvents', {})


class Api:
    """Low-level API access"""
    
    @staticmethod
    async def execute(component_id: str, action_id: str, params: Optional[Dict[str, Any]] = None) -> Any:
        """Execute a low-level API call"""
        return await _desktop_client.execute(component_id, action_id, params)


# Create instances for convenience
services = Services()
api = Api()

# Export everything
__all__ = [
    'DesktopBridge',
    'Services',
    'Api',
    # Instances
    'services',
    'api'
]
