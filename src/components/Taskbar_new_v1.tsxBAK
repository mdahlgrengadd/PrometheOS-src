import React, { useState, useEffect, useRef, useMemo, FC } from 'react';
import { useTheme } from '@/lib/ThemeProvider';
import { useWindowStore } from '@/store/windowStore';
import { WindowState } from '@/types/window';
import { useWebRTCStatus } from '../hooks/useWebRTCStatus';
import { FcGlobe, FcSpeaker, FcDocument } from 'react-icons/fc';
import { Monitor, Minimize2, Maximize2, Wifi, Home } from 'lucide-react';

interface TaskbarProps {
  onWindowClick: (id: string) => void;
}

const Taskbar: FC<TaskbarProps> = ({ onWindowClick }) => {
  // Theme and connection status
  const { theme } = useTheme();
  const isConnected = useWebRTCStatus().isConnected;
  const isBeOSTheme = theme === 'beos';
  const isMacOSTheme = theme === 'macos';

  // Subscribe to raw windows dict, then memoize filtered list
  const windowsDict = useWindowStore((state) => state.windows);
  const windows: WindowState[] = useMemo(
    () => Object.values(windowsDict).filter((w) => w.isOpen),
    [windowsDict]
  );

  // Start menu state
  const [isStartMenuOpen, setIsStartMenuOpen] = useState(false);
  const iframeRef = useRef<HTMLIFrameElement>(null);

  // Auto-hide state
  const [autoHide, setAutoHide] = useState(false);
  const [isVisible, setIsVisible] = useState(true);

  // Clock state
  const [currentTime, setCurrentTime] = useState(new Date());

  // Effects
  useEffect(() => {
    // Clock tick every second
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  useEffect(() => {
    // Read auto-hide setting once
    const stored = localStorage.getItem('taskbar-autohide') === 'true';
    setAutoHide(stored);
    setIsVisible(!stored);
  }, []);

  useEffect(() => {
    // Message & outside-click for start menu
    const handleMessage = (e: MessageEvent) => {
      if (e.data === 'closeStartMenu' || e.data?.action === 'openItem') {
        setIsStartMenuOpen(false);
      }
    };
    const handleClickOutside = (e: MouseEvent) => {
      const t = e.target as HTMLElement;
      if (!t.closest('.start-menu-iframe') && !t.closest('.taskbar-start')) {
        setIsStartMenuOpen(false);
      }
    };
    window.addEventListener('message', handleMessage);
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      window.removeEventListener('message', handleMessage);
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Handlers
  const toggleStartMenu = () => setIsStartMenuOpen((s) => !s);
  const handleMouseEnter = () => autoHide && setIsVisible(true);
  const handleMouseLeave = () => autoHide && setIsVisible(false);

  // Formatters
  const formatTime = (date: Date) =>
    date.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit', hour12: true });
  const formatDate = (date: Date) =>
    date.toLocaleDateString([], { month: 'numeric', day: 'numeric', year: 'numeric' });

  // Inline styles for XP look + auto-hide
  const containerStyle: React.CSSProperties = {
    position: 'absolute',
    bottom: 0,
    left: 0,
    width: '100%',
    height: '3rem',
    display: 'flex',
    background: 'linear-gradient(to bottom, #2582d1 0%, #3c96e4 3%, #5cb6ff 6%, #5baef5 10%, #4aa4eb 25%, #3a95dc 40%, #328fd5 50%, #2d8ace 55%, #2888ca 60%, #2582d1 100%)',
    boxShadow: 'inset 0 1px 0 0 #8ebcf1, 0 -1px 0 0 #5590e5',
    transition: autoHide ? 'transform 0.3s ease' : undefined,
    transform: autoHide && !isVisible ? 'translateY(100%)' : 'translateY(0)',
  };

  // Start menu iframe element
  const startMenuIframe = isStartMenuOpen && (
    <iframe
      ref={iframeRef}
      className="start-menu-iframe absolute bottom-12 left-0 w-72 h-96 border border-gray-300 rounded-t-lg shadow-lg z-50 overflow-hidden"
      src="/startmenu.html"
      frameBorder="0"
      title="Start Menu"
    />
  );

  return (
    <div
      style={containerStyle}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      {/* Start button & menu */}
      <div className="relative flex items-center pl-2">
        <button className="taskbar-start flex items-center" onClick={toggleStartMenu}>
          <Home className="w-5 h-5 text-white" />
        </button>
        {startMenuIframe}
      </div>

      {/* Quick launch */}
      <div className="flex items-center ml-2 space-x-1 border-r border-[#3976b8] pr-2">
        <div className="w-10 h-10 flex items-center justify-center rounded hover:bg-[#4096e3]/40 cursor-pointer">
          <FcGlobe className="w-5 h-5" />
        </div>
        <div className="w-10 h-10 flex items-center justify-center rounded hover:bg-[#4096e3]/40 cursor-pointer">
          <FcDocument className="w-5 h-5" />
        </div>
      </div>

      {/* Running apps */}
      <div className="flex items-center ml-2 space-x-1 flex-1">
        {windows.map((win) => (
          <button
            key={win.id}
            className={`flex items-center px-2 py-1 rounded ${
              win.isOpen && !win.isMinimized ? 'bg-[#4096e3]/60' : 'hover:bg-[#4096e3]/40'
            }`}
            onClick={() => onWindowClick(win.id)}
          >
            <Monitor className="w-5 h-5 mr-1 text-white" />
            <span className="truncate text-white text-xs">{win.title}</span>
            {win.isOpen && !win.isMinimized ? (
              <Minimize2 className="w-3 h-3 ml-1 text-white" />
            ) : (
              <Maximize2 className="w-3 h-3 ml-1 text-white" />
            )}
          </button>
        ))}
      </div>

      {/* System tray */}
      <div className="flex items-center pr-3 space-x-2">
        {isConnected && <Wifi className="w-4 h-4 text-white" />}
        <FcSpeaker className="w-4 h-4" />
        <div className="flex flex-col items-end text-white text-xs">
          <div className="font-bold">{formatTime(currentTime)}</div>
          <div className="text-[10px]">{formatDate(currentTime)}</div>
        </div>
      </div>
    </div>
  );
};

export default Taskbar;