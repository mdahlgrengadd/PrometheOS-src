// Generated by scripts/generate-unified-client.js
// This file wraps the OpenAPI Generator TypeScript client with our desktop bridge

// Re-export all generated types and APIs
export * from '../prometheos-client-generated';

// Import the generated APIs and types
import { Configuration, DefaultApi } from '../prometheos-client-generated';

// Desktop API interface for type safety
interface DesktopBridge {
  api: {
    execute(componentId: string, actionId: string, params?: Record<string, unknown>): Promise<unknown>;
  };
}

// Global desktop API interface
declare global {
  const desktop: DesktopBridge;
}

// Create a custom API client that uses our desktop bridge
class DesktopApiClient {
  async execute(componentId: string, actionId: string, params?: Record<string, unknown>): Promise<unknown> {
    // Use proper type checking without any
    if (typeof globalThis !== 'undefined' && 'desktop' in globalThis) {
      const globalWithDesktop = globalThis as typeof globalThis & { desktop?: DesktopBridge };
      if (globalWithDesktop.desktop?.api?.execute) {
        return globalWithDesktop.desktop.api.execute(componentId, actionId, params);
      }
    }
    throw new Error('Desktop API bridge not available');
  }
}

// Create API instance that uses our desktop bridge
const desktopClient = new DesktopApiClient();

// Create namespaced API instances that use our bridge
export const launcher = {
  async launchApp(params: { appId: string }) {
    return desktopClient.execute('launcher', 'launchApp', params);
  },
  async killApp(params: { appId: string }) {
    return desktopClient.execute('launcher', 'killApp', params);
  },
  async notify(params: { message: string; type?: 'radix' | 'sonner' }) {
    return desktopClient.execute('launcher', 'notify', params);
  }
};

export const dialog = {
  async openDialog(params: { 
    title: string; 
    description?: string; 
    confirmLabel?: string; 
    cancelLabel?: string; 
  }) {
    return desktopClient.execute('dialog', 'openDialog', params);
  }
};

export const onEvent = {
  async waitForEvent(params: { eventId: string; timeout?: number }) {
    return desktopClient.execute('onEvent', 'waitForEvent', params);
  }
};

export const event = {
  async listEvents(params: Record<string, never> = {}) {
    return desktopClient.execute('event', 'listEvents', params);
  }
};

// Export low-level API access
export const api = {
  execute: desktopClient.execute.bind(desktopClient)
};

// Default export
export default {
  launcher,
  dialog,
  onEvent,
  event,
  api
};
